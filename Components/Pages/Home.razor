@page "/"
@rendermode InteractiveServer
@inject IConfiguration Config

<PageTitle>Notebook</PageTitle>

<h1 class="display-4 text-center p-5">Notebook</h1>

<EditForm class="bg-light border border-1 p-5 mb-5"
  Model="NewNote" OnSubmit="() => CreateNoteAsync()" Enhance>
  <div class="form-group mb-3">
    <label for="newTitle" class="form-label">Title</label>
    <InputText @bind-Value="NewNote.Title"  id="newTitle" class="form-control" />
  </div>
  <div class="form-group mb-3">
    <label for="newContent" class="form-label">Content</label>
    <InputTextArea @bind-Value="NewNote.Content" id="newContent" class="form-control"></InputTextArea>
  </div>

  <button class="btn btn-primary">Add Note</button>
</EditForm>


<div class="row">
  <!-- NOTE TEMPLATE -->
  @foreach (var note in notes)
  {

  
  <div class="col-4">
    <div class="card my-3">
      <div class="card-header d-flex justify-content-end">
        <button class="btn btn-light" @onclick="() => DisplayDialog(note.Id)">
          <i class="bi bi-pencil-square"></i>
        </button>
        <button class="btn btn-light" @onclick="() => DeleteNoteAsnyc(note.Id)">
          <i class="bi bi-x-square"></i>
        </button>
      </div>
      <div class="card-body">
        <h2>@note.Title</h2>
        <p>@note.Content</p>
      </div>
    </div>
  </div>
  }
  <!-- NOTE TEMPLATE -->
</div>

<dialog open="@showDialog">
  <EditForm class="bg-light border border-1 p-5 mb-5 m-auto w-75" Model="EditNote" OnSubmit="() => UpdateNoteAsync()" Enhance>
    <div class="form-group mb-3">
      <label for="title" class="form-label">Title</label>
      <InputText @bind-Value="EditNote.Title" id="title" class="form-control" />
    </div>
    <div class="form-group mb-3">
      <label for="content" class="form-label">Content</label>
      <InputTextArea @bind-Value="EditNote.Content" id="content" class="form-control"></InputTextArea>
    </div>

    <button type="submit" class="btn btn-primary me-3" >Update Note</button>
    <button type="button" class="btn btn-secondary" OnClick="/">Cancel</button>
  </EditForm>
</dialog>



@code {
  private string? connectionString;

  private List<Note> notes = [];

  private bool showDialog = false;


  [SupplyParameterFromForm]

  private Note NewNote {get; set;} = new();

  [SupplyParameterFromForm]

  private Note EditNote {get; set;} = new();

  
  protected override async Task OnInitializedAsync()
  {
    
    connectionString = Config.GetConnectionString("default");

    notes = await GetNotesAsync();

    Console.WriteLine(notes.Count);

  }

  private async Task<List<Note>> GetNotesAsync()
    {
      using (var conn = new MySqlConnection(connectionString))
      {
        var sql = "SELECT * FROM Note";
        var rows = await conn.QueryAsync<Note>(sql);
        return rows.ToList();
      }
    }

  private async Task<Note> GetNoteAsync(int id)
    {
      using (var conn = new MySqlConnection(connectionString))
      {
        try
        {
          var sql = "SELECT * FROM Note WHERE Id = @Id";
          return await conn.QuerySingleAsync<Note>(sql, new { Id = id});
        }
        catch(InvalidOperationException ex)
        {
          Console.WriteLine(ex.Message);
          throw;
        }
      }

    }

    private async Task CreateNoteAsync()
    {
      using (var conn = new MySqlConnection(connectionString))
      {
        var sql = "INSERT INTO Note (Title, Content) VALUE (@Title, @Content)";
        await conn.ExecuteAsync(sql, new {
          Title = NewNote.Title,
          Content = NewNote.Content
        });
      }

      NewNote = new();
      notes = await GetNotesAsync();
    }

    private async Task DisplayDialog(int id)
    {
      showDialog = true;
      EditNote = await GetNoteAsync(id);
    }


    private async Task UpdateNoteAsync()
    {
      using (var conn = new MySqlConnection(connectionString))
      {
        var sql = "UPDATE Note SET Title = @Title, Content = @Content WHERE Id = @Id";
        await conn.ExecuteAsync(sql, EditNote);
      }

      showDialog = false;

      notes = await GetNotesAsync();

    }

    private async Task DeleteNoteAsnyc(int id)
    {
      using (var conn = new MySqlConnection(connectionString))
      {
        var sql = "DELETE FROM Note WHERE Id = @Id";
        await conn.ExecuteAsync(sql, new { Id = id});
      }

      notes = await GetNotesAsync();

    }




}